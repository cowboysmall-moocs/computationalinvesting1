import sys
import math

from itertools import combinations

import QSTK.qstkutil.qsdateutil as du
import QSTK.qstkutil.tsutil     as tsu
import QSTK.qstkutil.DataAccess as da

import datetime          as dt
import matplotlib.pyplot as plt
import pandas            as pd
import numpy             as np


VALID_ALLOCATIONS = [[0.0, 0.0, 0.0, 1.0], [0.0, 0.0, 0.1, 0.9], [0.0, 0.0, 0.2, 0.8], [0.0, 0.0, 0.3, 0.7], [0.0, 0.0, 0.4, 0.6], [0.0, 0.0, 0.5, 0.5], [0.0, 0.0, 0.6, 0.4], [0.0, 0.0, 0.7, 0.3], [0.0, 0.0, 0.8, 0.2], [0.0, 0.0, 0.9, 0.1], [0.0, 0.0, 1.0, 0.0], [0.0, 0.1, 0.0, 0.9], [0.0, 0.1, 0.1, 0.8], [0.0, 0.1, 0.2, 0.7], [0.0, 0.1, 0.3, 0.6], [0.0, 0.1, 0.4, 0.5], [0.0, 0.1, 0.5, 0.4], [0.0, 0.1, 0.6, 0.3], [0.0, 0.1, 0.7, 0.2], [0.0, 0.1, 0.8, 0.1], [0.0, 0.1, 0.9, 0.0], [0.0, 0.2, 0.0, 0.8], [0.0, 0.2, 0.1, 0.7], [0.0, 0.2, 0.2, 0.6], [0.0, 0.2, 0.3, 0.5], [0.0, 0.2, 0.4, 0.4], [0.0, 0.2, 0.5, 0.3], [0.0, 0.2, 0.6, 0.2], [0.0, 0.2, 0.7, 0.1], [0.0, 0.2, 0.8, 0.0], [0.0, 0.3, 0.0, 0.7], [0.0, 0.3, 0.1, 0.6], [0.0, 0.3, 0.2, 0.5], [0.0, 0.3, 0.3, 0.4], [0.0, 0.3, 0.4, 0.3], [0.0, 0.3, 0.5, 0.2], [0.0, 0.3, 0.6, 0.1], [0.0, 0.3, 0.7, 0.0], [0.0, 0.4, 0.0, 0.6], [0.0, 0.4, 0.1, 0.5], [0.0, 0.4, 0.2, 0.4], [0.0, 0.4, 0.3, 0.3], [0.0, 0.4, 0.4, 0.2], [0.0, 0.4, 0.5, 0.1], [0.0, 0.4, 0.6, 0.0], [0.0, 0.5, 0.0, 0.5], [0.0, 0.5, 0.1, 0.4], [0.0, 0.5, 0.2, 0.3], [0.0, 0.5, 0.3, 0.2], [0.0, 0.5, 0.4, 0.1], [0.0, 0.5, 0.5, 0.0], [0.0, 0.6, 0.0, 0.4], [0.0, 0.6, 0.1, 0.3], [0.0, 0.6, 0.2, 0.2], [0.0, 0.6, 0.3, 0.1], [0.0, 0.6, 0.4, 0.0], [0.0, 0.7, 0.0, 0.3], [0.0, 0.7, 0.1, 0.2], [0.0, 0.7, 0.2, 0.1], [0.0, 0.7, 0.3, 0.0], [0.0, 0.8, 0.0, 0.2], [0.0, 0.8, 0.1, 0.1], [0.0, 0.8, 0.2, 0.0], [0.0, 0.9, 0.0, 0.1], [0.0, 0.9, 0.1, 0.0], [0.0, 1.0, 0.0, 0.0], [0.1, 0.0, 0.0, 0.9], [0.1, 0.0, 0.1, 0.8], [0.1, 0.0, 0.2, 0.7], [0.1, 0.0, 0.3, 0.6], [0.1, 0.0, 0.4, 0.5], [0.1, 0.0, 0.5, 0.4], [0.1, 0.0, 0.6, 0.3], [0.1, 0.0, 0.7, 0.2], [0.1, 0.0, 0.8, 0.1], [0.1, 0.0, 0.9, 0.0], [0.1, 0.1, 0.0, 0.8], [0.1, 0.1, 0.1, 0.7], [0.1, 0.1, 0.2, 0.6], [0.1, 0.1, 0.3, 0.5], [0.1, 0.1, 0.4, 0.4], [0.1, 0.1, 0.5, 0.3], [0.1, 0.1, 0.6, 0.2], [0.1, 0.1, 0.7, 0.1], [0.1, 0.1, 0.8, 0.0], [0.1, 0.2, 0.0, 0.7], [0.1, 0.2, 0.1, 0.6], [0.1, 0.2, 0.2, 0.5], [0.1, 0.2, 0.3, 0.4], [0.1, 0.2, 0.4, 0.3], [0.1, 0.2, 0.5, 0.2], [0.1, 0.2, 0.6, 0.1], [0.1, 0.2, 0.7, 0.0], [0.1, 0.3, 0.0, 0.6], [0.1, 0.3, 0.1, 0.5], [0.1, 0.3, 0.2, 0.4], [0.1, 0.3, 0.3, 0.3], [0.1, 0.3, 0.4, 0.2], [0.1, 0.3, 0.5, 0.1], [0.1, 0.3, 0.6, 0.0], [0.1, 0.4, 0.0, 0.5], [0.1, 0.4, 0.1, 0.4], [0.1, 0.4, 0.2, 0.3], [0.1, 0.4, 0.3, 0.2], [0.1, 0.4, 0.4, 0.1], [0.1, 0.4, 0.5, 0.0], [0.1, 0.5, 0.0, 0.4], [0.1, 0.5, 0.1, 0.3], [0.1, 0.5, 0.2, 0.2], [0.1, 0.5, 0.3, 0.1], [0.1, 0.5, 0.4, 0.0], [0.1, 0.6, 0.0, 0.3], [0.1, 0.6, 0.1, 0.2], [0.1, 0.6, 0.2, 0.1], [0.1, 0.6, 0.3, 0.0], [0.1, 0.7, 0.0, 0.2], [0.1, 0.7, 0.1, 0.1], [0.1, 0.7, 0.2, 0.0], [0.1, 0.8, 0.0, 0.1], [0.1, 0.8, 0.1, 0.0], [0.1, 0.9, 0.0, 0.0], [0.2, 0.0, 0.0, 0.8], [0.2, 0.0, 0.1, 0.7], [0.2, 0.0, 0.2, 0.6], [0.2, 0.0, 0.3, 0.5], [0.2, 0.0, 0.4, 0.4], [0.2, 0.0, 0.5, 0.3], [0.2, 0.0, 0.6, 0.2], [0.2, 0.0, 0.7, 0.1], [0.2, 0.0, 0.8, 0.0], [0.2, 0.1, 0.0, 0.7], [0.2, 0.1, 0.1, 0.6], [0.2, 0.1, 0.2, 0.5], [0.2, 0.1, 0.3, 0.4], [0.2, 0.1, 0.4, 0.3], [0.2, 0.1, 0.5, 0.2], [0.2, 0.1, 0.6, 0.1], [0.2, 0.1, 0.7, 0.0], [0.2, 0.2, 0.0, 0.6], [0.2, 0.2, 0.1, 0.5], [0.2, 0.2, 0.2, 0.4], [0.2, 0.2, 0.3, 0.3], [0.2, 0.2, 0.4, 0.2], [0.2, 0.2, 0.5, 0.1], [0.2, 0.2, 0.6, 0.0], [0.2, 0.3, 0.0, 0.5], [0.2, 0.3, 0.1, 0.4], [0.2, 0.3, 0.2, 0.3], [0.2, 0.3, 0.3, 0.2], [0.2, 0.3, 0.4, 0.1], [0.2, 0.3, 0.5, 0.0], [0.2, 0.4, 0.0, 0.4], [0.2, 0.4, 0.1, 0.3], [0.2, 0.4, 0.2, 0.2], [0.2, 0.4, 0.3, 0.1], [0.2, 0.4, 0.4, 0.0], [0.2, 0.5, 0.0, 0.3], [0.2, 0.5, 0.1, 0.2], [0.2, 0.5, 0.2, 0.1], [0.2, 0.5, 0.3, 0.0], [0.2, 0.6, 0.0, 0.2], [0.2, 0.6, 0.1, 0.1], [0.2, 0.6, 0.2, 0.0], [0.2, 0.7, 0.0, 0.1], [0.2, 0.7, 0.1, 0.0], [0.2, 0.8, 0.0, 0.0], [0.3, 0.0, 0.0, 0.7], [0.3, 0.0, 0.1, 0.6], [0.3, 0.0, 0.2, 0.5], [0.3, 0.0, 0.3, 0.4], [0.3, 0.0, 0.4, 0.3], [0.3, 0.0, 0.5, 0.2], [0.3, 0.0, 0.6, 0.1], [0.3, 0.0, 0.7, 0.0], [0.3, 0.1, 0.0, 0.6], [0.3, 0.1, 0.1, 0.5], [0.3, 0.1, 0.2, 0.4], [0.3, 0.1, 0.3, 0.3], [0.3, 0.1, 0.4, 0.2], [0.3, 0.1, 0.5, 0.1], [0.3, 0.1, 0.6, 0.0], [0.3, 0.2, 0.0, 0.5], [0.3, 0.2, 0.1, 0.4], [0.3, 0.2, 0.2, 0.3], [0.3, 0.2, 0.3, 0.2], [0.3, 0.2, 0.4, 0.1], [0.3, 0.2, 0.5, 0.0], [0.3, 0.3, 0.0, 0.4], [0.3, 0.3, 0.1, 0.3], [0.3, 0.3, 0.2, 0.2], [0.3, 0.3, 0.3, 0.1], [0.3, 0.3, 0.4, 0.0], [0.3, 0.4, 0.0, 0.3], [0.3, 0.4, 0.1, 0.2], [0.3, 0.4, 0.2, 0.1], [0.3, 0.4, 0.3, 0.0], [0.3, 0.5, 0.0, 0.2], [0.3, 0.5, 0.1, 0.1], [0.3, 0.5, 0.2, 0.0], [0.3, 0.6, 0.0, 0.1], [0.3, 0.6, 0.1, 0.0], [0.3, 0.7, 0.0, 0.0], [0.4, 0.0, 0.0, 0.6], [0.4, 0.0, 0.1, 0.5], [0.4, 0.0, 0.2, 0.4], [0.4, 0.0, 0.3, 0.3], [0.4, 0.0, 0.4, 0.2], [0.4, 0.0, 0.5, 0.1], [0.4, 0.0, 0.6, 0.0], [0.4, 0.1, 0.0, 0.5], [0.4, 0.1, 0.1, 0.4], [0.4, 0.1, 0.2, 0.3], [0.4, 0.1, 0.3, 0.2], [0.4, 0.1, 0.4, 0.1], [0.4, 0.1, 0.5, 0.0], [0.4, 0.2, 0.0, 0.4], [0.4, 0.2, 0.1, 0.3], [0.4, 0.2, 0.2, 0.2], [0.4, 0.2, 0.3, 0.1], [0.4, 0.2, 0.4, 0.0], [0.4, 0.3, 0.0, 0.3], [0.4, 0.3, 0.1, 0.2], [0.4, 0.3, 0.2, 0.1], [0.4, 0.3, 0.3, 0.0], [0.4, 0.4, 0.0, 0.2], [0.4, 0.4, 0.1, 0.1], [0.4, 0.4, 0.2, 0.0], [0.4, 0.5, 0.0, 0.1], [0.4, 0.5, 0.1, 0.0], [0.4, 0.6, 0.0, 0.0], [0.5, 0.0, 0.0, 0.5], [0.5, 0.0, 0.1, 0.4], [0.5, 0.0, 0.2, 0.3], [0.5, 0.0, 0.3, 0.2], [0.5, 0.0, 0.4, 0.1], [0.5, 0.0, 0.5, 0.0], [0.5, 0.1, 0.0, 0.4], [0.5, 0.1, 0.1, 0.3], [0.5, 0.1, 0.2, 0.2], [0.5, 0.1, 0.3, 0.1], [0.5, 0.1, 0.4, 0.0], [0.5, 0.2, 0.0, 0.3], [0.5, 0.2, 0.1, 0.2], [0.5, 0.2, 0.2, 0.1], [0.5, 0.2, 0.3, 0.0], [0.5, 0.3, 0.0, 0.2], [0.5, 0.3, 0.1, 0.1], [0.5, 0.3, 0.2, 0.0], [0.5, 0.4, 0.0, 0.1], [0.5, 0.4, 0.1, 0.0], [0.5, 0.5, 0.0, 0.0], [0.6, 0.0, 0.0, 0.4], [0.6, 0.0, 0.1, 0.3], [0.6, 0.0, 0.2, 0.2], [0.6, 0.0, 0.3, 0.1], [0.6, 0.0, 0.4, 0.0], [0.6, 0.1, 0.0, 0.3], [0.6, 0.1, 0.1, 0.2], [0.6, 0.1, 0.2, 0.1], [0.6, 0.1, 0.3, 0.0], [0.6, 0.2, 0.0, 0.2], [0.6, 0.2, 0.1, 0.1], [0.6, 0.2, 0.2, 0.0], [0.6, 0.3, 0.0, 0.1], [0.6, 0.3, 0.1, 0.0], [0.6, 0.4, 0.0, 0.0], [0.7, 0.0, 0.0, 0.3], [0.7, 0.0, 0.1, 0.2], [0.7, 0.0, 0.2, 0.1], [0.7, 0.0, 0.3, 0.0], [0.7, 0.1, 0.0, 0.2], [0.7, 0.1, 0.1, 0.1], [0.7, 0.1, 0.2, 0.0], [0.7, 0.2, 0.0, 0.1], [0.7, 0.2, 0.1, 0.0], [0.7, 0.3, 0.0, 0.0], [0.8, 0.0, 0.0, 0.2], [0.8, 0.0, 0.1, 0.1], [0.8, 0.0, 0.2, 0.0], [0.8, 0.1, 0.0, 0.1], [0.8, 0.1, 0.1, 0.0], [0.8, 0.2, 0.0, 0.0], [0.9, 0.0, 0.0, 0.1], [0.9, 0.0, 0.1, 0.0], [0.9, 0.1, 0.0, 0.0], [1.0, 0.0, 0.0, 0.0]]


def print_results(start_date, end_date, symbols, allocations, results):
    print
    print 'Start Date: %s' % (start_date.strftime('%B %d, %Y'))
    print 'End Date: %s' % (end_date.strftime('%B %d, %Y'))
    print 'Symbols: %s' % (symbols)
    print 'Optimal Allocations: %s' % (allocations)
    print 'Sharpe Ratio: %s' % (results[2])
    print 'Volatility (stdev of daily returns): %s' % (results[0])
    print 'Average Daily Return: %s' % (results[1])
    print 'Cumulative Return: %s' % (results[3])
    print



def simulate(start_date, end_date, symbols, allocations):
    timestamps        = du.getNYSEdays(start_date, end_date, dt.timedelta(hours = 16))

    keys              = ['close']
    data_access       = da.DataAccess('Yahoo')
    data              = data_access.get_data(timestamps, symbols, keys)

    closing_data      = dict(zip(keys, data))
    closing_prices    = closing_data['close'].values

    normalized_price  = closing_prices / closing_prices[0, :]
    portfolio_returns = np.sum(normalized_price * allocations, axis = 1)

    daily_returns     = portfolio_returns.copy()
    tsu.returnize0(daily_returns)

    daily_return      = np.average(daily_returns)
    std_deviation     = np.std(daily_returns)
    sharpe_ratio      = (daily_return / std_deviation) * math.sqrt(252)

    return std_deviation, daily_return, sharpe_ratio, portfolio_returns[-1]



def optimize(start_date, end_date, symbols, allocations):
    optimal_allocations = None
    optimal_values      = None

    max_sharpe_ratio    = 0
    for allocation in allocations:
        values = simulate(start_date, end_date, symbols, allocation)
        if values[2] > max_sharpe_ratio:
            max_sharpe_ratio    = values[2]
            optimal_allocations = allocation
            optimal_values      = values

    return optimal_values, optimal_allocations



def main(argv):
    start_date  = dt.datetime(2011, 1, 1)
    end_date    = dt.datetime(2011, 12, 31)
    symbols     = ['AAPL','GLD','GOOG','XOM']
    allocations = [0.4, 0.4, 0.0, 0.2]

    values = simulate(start_date, end_date, symbols, allocations)
    print_results(start_date, end_date, symbols, allocations, values)



    start_date  = dt.datetime(2010, 1, 1)
    end_date    = dt.datetime(2010, 12, 31)
    symbols     = ['AXP', 'HPQ', 'IBM', 'HNZ']
    allocations = [0.0, 0.0, 0.0, 1.0]

    values = simulate(start_date, end_date, symbols, allocations)
    print_results(start_date, end_date, symbols, allocations, values)



    start_date  = dt.datetime(2011, 1, 1)
    end_date    = dt.datetime(2011, 12, 31)
    symbols     = ['ABT', 'ACAS', 'ACE', 'ADI']
    allocations = [0.9, 0.0, 0.1, 0.0]

    values = simulate(start_date, end_date, symbols, allocations)
    print_results(start_date, end_date, symbols, allocations, values)


    start_date  = dt.datetime(2011, 1, 1)
    end_date    = dt.datetime(2011, 12, 31)
    symbols     = ['ABT', 'ACAS', 'ACE', 'ADI']

    values, allocations = optimize(start_date, end_date, symbols, VALID_ALLOCATIONS)
    print_results(start_date, end_date, symbols, allocations, values)



    start_date  = dt.datetime(2010, 1, 1)
    end_date    = dt.datetime(2010, 12, 31)
    symbols     = ['C', 'GS', 'IBM', 'HNZ']

    values, allocations = optimize(start_date, end_date, symbols, VALID_ALLOCATIONS)
    print_results(start_date, end_date, symbols, allocations, values)



    start_date  = dt.datetime(2011, 1, 1)
    end_date    = dt.datetime(2011, 12, 31)
    symbols     = ['BRCM', 'TXN', 'IBM', 'HNZ']

    values, allocations = optimize(start_date, end_date, symbols, VALID_ALLOCATIONS)
    print_results(start_date, end_date, symbols, allocations, values)





if __name__ == "__main__":
    main(sys.argv[1:])
